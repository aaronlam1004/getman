import sysimport osimport jsonimport signalimport configparserfrom enum import EnumFILE_PATH = os.path.dirname(__file__)GETSCRIPT_PATH = os.path.join(FILE_PATH, 'getscript')sys.path.append(GETSCRIPT_PATH)from PyQt5 import QtWidgets, QtCore, uicfrom PyQt5.QtWidgets import QMenuBar, QAction, QListWidgetItem, QInputDialog, QMessageBoxfrom PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QModelIndexfrom PyQt5.QtGui import QBrush, QColor, QFont, QStandardItemModel, QStandardItemfrom Defines import REQUEST_TYPE_COLORSfrom RequestTable import RequestTablefrom BodySelector import BodySelection, BodySelectorfrom Workspace import Workspace, WORKSPACE_PATHfrom Getman import Getmanfrom Utils import GetUiPathfrom RequestHandler import RequestTypes, RequestHandlerfrom GetScriptIDE import GetScriptIDEfrom JsonHighlighter import JsonHighlighterclass ExplorerModel:    NAME, TYPE = range(2)    def __init__(self, parent):        self.model = QStandardItemModel(0, 2, parent)        self.model.setHorizontalHeaderLabels(["Name", "Type"])        self.count = 0    def Add(self, request_name="", request_type=""):        req_name = QStandardItem(request_name)        req_type = QStandardItem(request_type)        req_type.setEditable(False)        self.model.appendRow([req_name, req_type])        self.count += 1    def Get(self, row, col):        return self.model.item(row, col)    def RemoveRow(self, row):        self.model.removeRow(row)    def Clear(self):        self.model.clear()        self.model.setHorizontalHeaderLabels(["Name", "Type"])        self.count = 0class GetmanApp(QtWidgets.QMainWindow):    workspace_updated_signal = pyqtSignal()    def __init__(self):        super(GetmanApp, self).__init__()        uic.loadUi(GetUiPath(__file__, 'ui/GetmanApp.ui'), self)        self.setWindowTitle("Getman")        self.explorer_model = ExplorerModel(self)        self.tree_view_explorer.setModel(self.explorer_model.model)        self.ConnectActions()        self.InitWorkspace()        self.InitMenu()        self.showMaximized()    def closeEvent(self, event):        save = QMessageBox.question(self, "Save workspace?", "Do you want to save your workspace before exiting?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)        close = (save == QMessageBox.Yes) or (save == QMessageBox.No)        if save == QMessageBox.Yes:            self.getman.SaveWorkspace()        if close:            super(GetmanApp, self).closeEvent(event)        else:            event.ignore()    def ConnectActions(self):        self.tree_view_explorer.selectionModel().selectionChanged.connect(self.OpenGetmanRequest)        self.pb_create_request.clicked.connect(self.CreateGetmanRequest)        self.pb_delete_request.clicked.connect(self.DeleteGetmanRequest)    def InitWorkspace(self):        self.workspace_updated_signal.connect(self.HandleWorkspaceUpdated)        self.workspace = Workspace(self.workspace_updated_signal)        self.workspace.Init()    def HandleWorkspaceUpdated(self):        self.explorer_model.Clear()        for request in self.workspace.requests:            request_json = self.ReadGetmanRequest(self.workspace.GetWorkspaceRequestPath(request))            self.explorer_model.Add(request, request_json["request_type"])        workspace = self.workspace.name if self.workspace.name != "" else "Untitled"        title = f"Getman - {workspace}"        self.setWindowTitle(title)    def CreateGetmanRequest(self):        name, ok = QInputDialog.getText(self, "Request", "Enter name of request:")        if ok and name != "":            new_request = Getman.EmptyRequest()            self.workspace.SaveRequestInWorkspace(name, new_request)            self.workspace.ReloadWorkspace()    def DeleteGetmanRequest(self):        if len(self.tree_view_explorer.selectedIndexes()) > 0:            selected_index = self.tree_view_explorer.selectedIndexes()[ExplorerModel.NAME]            name = self.explorer_model.Get(selected_index.row(), ExplorerModel.NAME).text()            delete = QMessageBox.question(self, "Delete request?", "Do you want to delete request?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)            if delete == QMessageBox.Yes:                self.tree_view_explorer.clearSelection()                self.tree_view_explorer.setCurrentIndex(QModelIndex())                self.explorer_model.RemoveRow(selected_index.row())                self.workspace.DeleteRequestFromWorkspace(name)    def OpenGetmanRequest(self, selected, deselected):        if len(selected.indexes()) > 0:            print(selected.indexes())            name_idx = selected.indexes()[ExplorerModel.NAME]            request_name = self.explorer_model.Get(name_idx.row(), name_idx.column()).text()            request_path = self.workspace.GetWorkspaceRequestPath(request_name)            request_json = self.ReadGetmanRequest(request_path)            getman = Getman()            getman.LoadRequest(request_json)            self.tabwidget_getman.addTab(getman, request_name)    def CloseGetmanRequest(self):        pass    def ReadGetmanRequest(self, request_file):        request_json = {}        if os.path.exists(request_file):            try:                with open(request_file, 'r') as request:                    request_json = json.loads(request.read())            except Exception as exception:                print(exception)        return request_json    def InitMenu(self):        self.menu_bar = QMenuBar(self)        self.InitializeFileMenuOptions()        self.InitializeScriptMenuOptions()        self.setMenuBar(self.menu_bar)    def InitializeFileMenuOptions(self):        file_menu = self.menu_bar.addMenu("File")        save_action = QAction("Save", self)        # save_action.triggered.connect(lambda : self.getman.SaveWorkspace())        file_menu.addAction(save_action)        save_as_action = QAction("Save as", self)        # save_as_action.triggered.connect(lambda : self.getman.SaveWorkspace(save_dialog=True))        file_menu.addAction(save_as_action)        open_action = QAction("Open", self)        # open_action.triggered.connect(self.getman.OpenWorkspace)        file_menu.addAction(open_action)        close_action = QAction("Close", self)        # close_action.triggered.connect(self.getman.workspace.CloseWorkspace)        file_menu.addAction(close_action)        exit_action = QAction("Exit", self)        exit_action.triggered.connect(self.close)        file_menu.addAction(exit_action)    def InitializeScriptMenuOptions(self):        pass        # script_menu = self.menu_bar.addMenu("Scripts")        # open_script_ide_action = QAction("Launch IDE", self)        # open_script_ide_action.triggered.connect(self.OpenScriptTool)        # script_menu.addAction(open_script_ide_action)    def OpenScriptTool(self):        pass        # self.getman.script_ide.request_script_signal.connect(self.getman.script_ide.AddRequestToScript)        # self.getman.script_ide.show()if __name__ == '__main__':    q_application = QtWidgets.QApplication(sys.argv)    q_application.setStyle("Fusion")    app = GetmanApp()    app.show()    sys.exit(q_application.exec_())